[profile.default]
# The source directory
src = 'src'
# The test directory
test = 'test'
# The script directory
script = 'script'
# The artifact directory
out = 'out'
# A list of paths to look for libraries in
libs = ['lib']
# Whether to autodetect remappings by scanning the `libs` folders recursively
auto_detect_remappings = true
# Whether to cache builds or not
cache = true
# The cache directory if enabled
cache_path = 'cache'
# Whether to ignore the cache
force = false
# The EVM version by hardfork name
evm_version = 'london'
# A list of contracts to output gas reports for
gas_reports = ['*']
# A list of contracts to ignore for gas reports
gas_reports_ignore = []
# Configures the permissions of cheat codes that touch the file system
fs_permissions = [{ access = "read-write", path = "./" }]
# The `block.number` value during EVM execution
block_number = 666
# The gas limit in tests
gas_limit = 9223372036854775807
# The gas price in tests (in wei)
gas_price = 0
# A list of ignored solc error codes
ignored_error_codes = [
    5574 # Code size
]
# Disables downloading missing solc versions
offline = false
# Enables or disables the optimizer
optimizer = true
# The number of optimizer runs
optimizer_runs = 200
# The address of `msg.sender` in tests
sender = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# The address of `tx.origin` in tests
tx_origin = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# The initial balance of the test contract
initial_balance = '0xffffffffffffffffffffffff'
# The block timestamp in tests
block_timestamp = 1679400509
# The block difficulty in tests
block_difficulty = 0
# The block basefee in tests (in wei)
block_base_fee_per_gas = 0
# The address of `block.coinbase` in tests
block_coinbase = '0x0000000000000000000000000000000000000000'
# Enables or disables RPC caching when forking
no_storage_caching = false
# Whether or not to enable `vm.ffi`
ffi = true
# The verbosity of tests
verbosity = 2
# Whether contract build warnings will cause compilation to fail
deny_warnings = true
# Where the broadcast logs are stored
broadcast = 'broadcast'
# The Solc instance to use if any.
solc = '0.8.20'
# additional solc allow paths
allow_paths = []
# additional solc include paths
include_paths = []
# Whether to emit additional build info files
build_info = false
# Extra output to include in the contract's artifact.
extra_output = []
# Extra output to write to separate files.
extra_output_files = []
# Print the names of the compiled contracts
names = false
# Print the sizes of the compiled contracts
sizes = false
# Whether or not to use the Yul intermediate representation compilation pipeline
via_ir = false
# Switch optimizer components on or off in detail
#optimizer_details = None
# Model checker settings.
#model_checker = None,
# Only run test functions matching the specified regex pattern
#test_pattern = None
# Only run test functions that do not match the specified regex pattern
#test_pattern_inverse = None
# Only run tests in contracts matching the specified regex pattern
#contract_pattern = None
# Only run tests in contracts that do not match the specified regex pattern
#contract_pattern_inverse = None
# Only run tests in source files matching the specified glob pattern
#path_pattern = None
# Only run tests in source files that do not match the specified glob pattern
#path_pattern_inverse = None
# Pins the block number for the state fork
#fork_block_number = None
# The block gas limit
#block_gas_limit = None
# The path to the `build-info` directory that contains the build info json files
#build_info_path = None

# Remove metadata from bytecode to get deterministic compiled bytecode accross different operating systems
bytecode_hash = "none"
cbor_metadata = false

[profile.dev]
optimizer = false
# Whether contract build warnings will cause compilation to fail
deny_warnings = false

[rpc_endpoints]
arbitrum = "${ARBITRUM_URL}"
optimism = "${OPTIMISM_URL}"
polygon = "${POLYGON_URL}"
localhost = "http://127.0.0.1:8545"
mainnet = "${MAINNET_URL}"
goerli = "${GOERLI_URL}"

[etherscan]
arbitrum = { key = "${ETHERSCAN_ARBITRUM_KEY}" }
optimism = { key = "${ETHERSCAN_OPTIMISM_KEY}" }
polygon = { key = "${ETHERSCAN_POLYGON_KEY}" }
mainnet = { key = "${ETHERSCAN_MAINNET_KEY}" }
goerli = { key = "${ETHERSCAN_GOERLI_KEY}" }

[fmt]
# Maximum line length where formatter will try to wrap the line
line_length = 140
# Number of spaces per indentation level
tab_width = 4
# Print spaces between brackets
bracket_spacing = true
# Style of uint/int256 types
int_types = "long"
# Write function attributes multiline first
multiline_func_header = "attributes_first"
# Style of quotation marks
quote_style = "double"
# Style of underscores in number literals
number_underscore = "thousands"
# Prefer single line block when possible
single_line_statement_blocks = "single"
# Add new line at start and end of contract declarations
contract_new_lines = true

[fuzz]
# The number of fuzz runs for fuzz tests
runs = 256
# The maximum number of test case rejections allowed by proptest, to be
# encountered during usage of `vm.assume` cheatcode. This will be used
# to set the `max_global_rejects` value in proptest test runner config.
# `max_local_rejects` option isn't exposed here since we're not using
# `prop_filter`.
max_test_rejects = 65536
# The weight of the dictionary
dictionary_weight = 40
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true

[invariant]
# The number of runs that must execute for each invariant test group
runs = 256
# The number of calls executed to attempt to break invariants in one run
depth = 15
# Fails the invariant fuzzing if a revert occurs
fail_on_revert = false
# Allows overriding an unsafe external call when running invariant tests. eg. reentrancy checks
call_override = false
# The weight of the dictionary
dictionary_weight = 80
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true
