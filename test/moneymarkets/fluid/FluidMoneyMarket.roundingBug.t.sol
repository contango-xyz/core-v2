//SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.20;

import "../../TestSetup.t.sol";

contract FluidMoneyMarketRoundingBugfixTest is Test, Addresses {

    address private maestro;

    function setUp() public {
        vm.createSelectFork("mainnet", 20_842_983);
        maestro = _loadAddress("MaestroProxy");
    }

    function testCanClose() public {
        bytes memory data =
            hex"e2b0e1cc735553446555534443000000000000001fffffffff00000000110000000003fe8000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000010a3ea0000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000ca90d43a2f3b9e9b356dd0877aced3df05296d6000000000000000000000000069460570c93f9de5e2edbc3052bf10125f0ca22d00000000000000000000000069460570c93f9de5e2edbc3052bf10125f0ca22d00000000000000000000000000000000000000000000a39d33ec5ea4c19e4f6800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ab515542d621574f9b5212d50593cd0c07e641bd0000000000000000000000000000000000000000000000000000000000000824b17d0e6e00000000000000000000000000000000d6f729a0197842ecbcf6ccb7b6be93180000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000a35e600164223486cae700000000000000000000000000000000000000000000003ed3eafa828d178481000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b11897628a000000000000000000000000000000000000000000000000000000000000027d00000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000999eb1bbfabbf5a6b3cf4ea6369b3abbd51d8fcd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a35e600164223486cae700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000052812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000069460570c93f9de5e2edbc3052bf10125f0ca22d00000000000000000000000000000000000000000000a35e600164223486cae7000000000000000000000000000000000000000000000000000000b11897628a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000038200035400030a0002f000a0c9e75c48000000000000000009010000000000000000000000000000000000000000000000000002c20000c200a007e5c0d200000000000000000000000000000000000000000000000000009e00004f02a000000000000000000000000000000000000000000000000000000011b7c83b7aee63c1e501867b321132b18b5bf3775c0d9040d1872979422e9d39a5de30e57443bff2a8307a4256c8797a349702a000000000000000000000000000000000000000000000000000000011b95000c5ee63c1e50004c8577958ccc170eb3d2cca76f9d51bc6e42d8fdac17f958d2ee523a2206206994597c13d831ec700a007e5c0d20000000000000000000000000000000000000000000001dc00012c0000b05120167478921b907422f8e88b43c4af2b8bea278d3a9d39a5de30e57443bff2a8307a4256c8797a349700443df0212400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000828d01ee01b05571c09b412083f20f44975d03b1b09e64809b757c47f942beea0004ba0876520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd095120bebc44782c7db0a1a60cb6fe97d0b483032ff1c76b175474e89094c44da98b954eedeac495271d0f00443df021240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009f5f4761c40020d6bdbf78a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800a0f2fa6b66a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000c4c5fd89ef000000000000000000000000004c1cae80a06c4eca27a0b86991c6218b36c1d19d4a2e9eb0ce3606eb481111111254eeb25477b68fb85ed929f73a9605827787a5c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        vm.prank(0xCa90D43A2F3B9E9B356dd0877ACED3dF05296D60);
        (bool success,) = address(maestro).call(data);
        assertFalse(success, "Should have failed");

        IContango contango = IContango(_loadAddress("ContangoProxy"));
        IWETH9 nativeToken = IWETH9(_loadAddress("NativeToken"));
        IFluidVaultResolver resolver = IFluidVaultResolver(_loadAddress("FluidVaultResolver"));

        // Use latest code
        vm.etch(_loadAddress("FluidImmutableProxy"), address(new FluidMoneyMarket(contango, nativeToken, resolver)).code);

        vm.prank(0xCa90D43A2F3B9E9B356dd0877ACED3dF05296D60);
        (success,) = address(maestro).call(data);
        assertTrue(success, "Should have succeeded");
    }

}
